<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot整合RabbitMQ</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/09/26/springboot-zheng-he-rabbitmq/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/09/26/springboot-zheng-he-rabbitmq/</url>
      
        <content type="html"><![CDATA[<h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="2、application-yml配置如下："><a href="#2、application-yml配置如下：" class="headerlink" title="2、application.yml配置如下："></a>2、application.yml配置如下：</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> xxx.xxx.xxx.xxx    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /yoona<span class="token punctuation">-</span>cloud</code></pre><h4 id="3、枚举关系"><a href="#3、枚举关系" class="headerlink" title="3、枚举关系"></a>3、枚举关系</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 队列枚举 * @date 2022-06-17 11:25 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqQueueEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有队列     */</span>        <span class="token function">Q_MAIL_SEND</span><span class="token punctuation">(</span><span class="token string">"Q_MAIL_SEND"</span><span class="token punctuation">,</span> <span class="token string">"邮件发送队列"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 交换机枚举 * @date 2022-06-17 11:35 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqExchangeEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有交换机     */</span>    <span class="token function">E_TOPIC_MAIL_SEND</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">,</span><span class="token string">"topic类型的邮件发送交换机"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 路由枚举 * @date 2022-06-17 11:39 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqRoutingKeyEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有路由     */</span>    <span class="token function">K_MAIL_SEND</span><span class="token punctuation">(</span><span class="token string">"K_MAIL_SEND"</span><span class="token punctuation">,</span><span class="token string">"邮件发送路由键"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 绑定关系枚举 * @date 2022-06-17 11:41 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqBindEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有绑定关系     */</span>    <span class="token function">MAIL_SEND</span><span class="token punctuation">(</span>RabbitMqExchangeEnum<span class="token punctuation">.</span>E_TOPIC_MAIL_SEND<span class="token punctuation">,</span> RabbitMqQueueEnum<span class="token punctuation">.</span>Q_MAIL_SEND<span class="token punctuation">,</span> RabbitMqRoutingKeyEnum<span class="token punctuation">.</span>K_MAIL_SEND<span class="token punctuation">,</span><span class="token boolean">true</span> <span class="token punctuation">,</span><span class="token string">"MAIL_SEND"</span><span class="token punctuation">,</span> <span class="token string">"邮件发送"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RabbitMqExchangeEnum rabbitMqExchangeEnum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RabbitMqQueueEnum rabbitMqQueueEnum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RabbitMqRoutingKeyEnum rabbitMqRoutingKeyEnum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Boolean isBind<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Exchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>TopicExchange<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2022-06-17 11:54 */</span><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqExchangeTypeEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据交换机的类型，创建对应的交换机     */</span>    <span class="token function">DIRECT</span><span class="token punctuation">(</span><span class="token string">"direct"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Exchange <span class="token function">createExchange</span><span class="token punctuation">(</span>String exchangeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">TOPIC</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Exchange <span class="token function">createExchange</span><span class="token punctuation">(</span>String exchangeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RabbitMqExchangeTypeEnum <span class="token function">getInstanceByType</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>RabbitMqExchangeTypeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"无效的exchange type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String type<span class="token punctuation">;</span>    <span class="token function">RabbitMqExchangeTypeEnum</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建交换机     * @param exchangeName     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Exchange <span class="token function">createExchange</span><span class="token punctuation">(</span>String exchangeName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a>4、配置</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>RabbitMqBindEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>RabbitMqExchangeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>message<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>RabbitMqExchangeTypeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Exchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableRabbit<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>config<span class="token punctuation">.</span>SimpleRabbitListenerContainerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitAdmin<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>RabbitTransactionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>SimpleRabbitListenerContainerFactoryConfigurer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnClass<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnMissingBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2022-06-17 11:50 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>EnableRabbit<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RabbitAdmin rabbitAdmin<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CONCURRENT <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customContainerFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SimpleRabbitListenerContainerFactory <span class="token function">containerFactory</span><span class="token punctuation">(</span>SimpleRabbitListenerContainerFactoryConfigurer configurer<span class="token punctuation">,</span>                                                                 ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleRabbitListenerContainerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setConcurrentConsumers</span><span class="token punctuation">(</span>DEFAULT_CONCURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setMaxConcurrentConsumers</span><span class="token punctuation">(</span>DEFAULT_CONCURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        configurer<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> RabbitTransactionManager <span class="token function">rabbitTransactionManager</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTransactionManager</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> RabbitAdmin <span class="token function">rabbitAdmin</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitAdmin</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化     */</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建交换机</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>RabbitMqExchangeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>rabbitMqExchangeEnum <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Exchange exchange <span class="token operator">=</span> RabbitMqExchangeTypeEnum                                <span class="token punctuation">.</span><span class="token function">getInstanceByType</span><span class="token punctuation">(</span>rabbitMqExchangeEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">createExchange</span><span class="token punctuation">(</span>rabbitMqExchangeEnum<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"创建交换机时发生异常:{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建队列并绑定exchange</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>RabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>rabbitMqBindEnum <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getIsBind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 无需绑定</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getRabbitMqQueueEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span>                    rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getRabbitMqQueueEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>                    rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getRabbitMqExchangeEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getRabbitMqRoutingKeyEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5、实际应用例子"><a href="#5、实际应用例子" class="headerlink" title="5、实际应用例子"></a>5、实际应用例子</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>        RabbitMqExchangeEnum<span class="token punctuation">.</span>E_TOPIC_MAIL_SEND<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        RabbitMqRoutingKeyEnum<span class="token punctuation">.</span>K_MAIL_SEND<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>mailTask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token punctuation">(</span>onConstructor <span class="token operator">=</span> <span class="token annotation punctuation">@__</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Q_MAIL_SEND"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailSendListener</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理监到消息逻辑xxx...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus引入p6spy打印执行SQL</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/09/23/mybatis-plus-yin-ru-p6spy-da-yin-zhi-xing-sql/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/09/23/mybatis-plus-yin-ru-p6spy-da-yin-zhi-xing-sql/</url>
      
        <content type="html"><![CDATA[<p>引入p6spy方便查看执行日志，<code>MyBatis-Plus3.2.1以上</code>使用</p><p><a href="https://baomidou.com/pages/833fab/">官方文档地址</a></p><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>p6spy<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>p6spy<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span>最新版本<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>具体版本号，可以去maven仓库去查询。</p><p><a href="https://mvnrepository.com/artifact/p6spy/p6spy">地址</a></p><h4 id="2、application-yml-配置"><a href="#2、application-yml-配置" class="headerlink" title="2、application.yml 配置"></a>2、application.yml 配置</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.p6spy.engine.spy.P6SpyDriver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>p6spy<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>mem<span class="token punctuation">:</span>test    <span class="token punctuation">...</span></code></pre><h4 id="3、spy-properties-配置"><a href="#3、spy-properties-配置" class="headerlink" title="3、spy.properties 配置"></a>3、spy.properties 配置</h4><pre class=" language-text"><code class="language-text">#3.2.1以上使用modulelist=com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory#3.2.1以下使用或者不配置#modulelist=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory# 自定义日志打印logMessageFormat=com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger#日志输出到控制台appender=com.baomidou.mybatisplus.extension.p6spy.StdoutLogger# 使用日志系统记录 sql#appender=com.p6spy.engine.spy.appender.Slf4JLogger# 设置 p6spy driver 代理deregisterdrivers=true# 取消JDBC URL前缀useprefix=true# 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.excludecategories=info,debug,result,commit,resultset# 日期格式dateformat=yyyy-MM-dd HH:mm:ss# 实际驱动可多个#driverlist=org.h2.Driver# 是否开启慢SQL记录outagedetection=true# 慢SQL记录标准 2 秒outagedetectioninterval=2</code></pre><h4 id="4、执行效果："><a href="#4、执行效果：" class="headerlink" title="4、执行效果："></a>4、执行效果：</h4><pre class=" language-text"><code class="language-text"> Consume Time：3 ms 2022-09-23 14:45:47 Execute SQL：SELECT t1.id source_id, t1.source_name, t2.id table_id, t2.table_name FROM `st_source` t1 LEFT JOIN st_table t2 ON t1.source_hash_code = t2.source_hash_code WHERE t1.is_delete = 0 AND t2.is_delete = 0</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 日常随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis-Plus </tag>
            
            <tag> 日常随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus多数据源切换</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/09/23/mybatis-plus-duo-shu-ju-yuan-qie-huan/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/09/23/mybatis-plus-duo-shu-ju-yuan-qie-huan/</url>
      
        <content type="html"><![CDATA[<p><a href="https://baomidou.com/pages/a61e1b/#%E6%96%87%E6%A1%A3-documentation">官方文档地址</a></p><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>dynamic<span class="token operator">-</span>datasource<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>具体版本号，可以去maven仓库去查询。<a href="https://mvnrepository.com/artifact/com.baomidou/dynamic-datasource-spring-boot-starter">地址</a></p><h4 id="2、配置数据源"><a href="#2、配置数据源" class="headerlink" title="2、配置数据源"></a>2、配置数据源</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token key atrule">primary</span><span class="token punctuation">:</span> master <span class="token comment" spellcheck="true">#设置默认的数据源或者数据源组,默认值即为master</span>      <span class="token key atrule">strict</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true">#严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">master</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//xx.xx.xx.xx<span class="token punctuation">:</span>3306/dynamic          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver <span class="token comment" spellcheck="true"># 3.2.0开始支持SPI可省略此配置</span>        <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//xx.xx.xx.xx<span class="token punctuation">:</span>3307/dynamic          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver        <span class="token key atrule">slave_2</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> ENC(xxxxx) <span class="token comment" spellcheck="true"># 内置加密,使用请查看详细文档</span>          <span class="token key atrule">username</span><span class="token punctuation">:</span> ENC(xxxxx)          <span class="token key atrule">password</span><span class="token punctuation">:</span> ENC(xxxxx)          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver       <span class="token comment" spellcheck="true">#......省略</span>       <span class="token comment" spellcheck="true">#以上会配置一个默认库master，一个组slave下有两个子库slave_1,slave_2</span></code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 多主多从                      纯粹多库（记得设置primary）                   混合配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>                               <span class="token key atrule">spring</span><span class="token punctuation">:</span>                               <span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                           <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                           <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>                              <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>                              <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                           <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                           <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">master_1</span><span class="token punctuation">:</span>                             <span class="token key atrule">mysql</span><span class="token punctuation">:</span>                                <span class="token key atrule">master</span><span class="token punctuation">:</span>        <span class="token key atrule">master_2</span><span class="token punctuation">:</span>                             <span class="token key atrule">oracle</span><span class="token punctuation">:</span>                               <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>                              <span class="token key atrule">sqlserver</span><span class="token punctuation">:</span>                            <span class="token key atrule">slave_2</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_2</span><span class="token punctuation">:</span>                              <span class="token key atrule">postgresql</span><span class="token punctuation">:</span>                           <span class="token key atrule">oracle_1</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_3</span><span class="token punctuation">:</span>                              <span class="token key atrule">h2</span><span class="token punctuation">:</span>                                   <span class="token key atrule">oracle_2</span><span class="token punctuation">:</span></code></pre><h4 id="3、使用-DS切换数据源"><a href="#3、使用-DS切换数据源" class="headerlink" title="3、使用@DS切换数据源"></a>3、使用@DS切换数据源</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"slave"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>  <span class="token keyword">public</span> List <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>  <span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"slave_1"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> List <span class="token function">selectByCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">"select * from user where age >10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 日常随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis-Plus </tag>
            
            <tag> 多数据源 </tag>
            
            <tag> 日常随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全局异常处理类</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/09/23/quan-ju-yi-chang-chu-li-lei/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/09/23/quan-ju-yi-chang-chu-li-lei/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StrUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseResponse<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>response<span class="token punctuation">.</span>SystemResponse<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultMessageSourceResolvable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>BindException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>BindingResult<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>MethodArgumentNotValidException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestControllerAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 全局异常处理类 * @date 2022-03-24 15:15 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> BaseResponse <span class="token function">exceptionHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"接口:{}，发生异常，异常摘要：{}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理Get请求中 使用@Valid 验证路径中请求实体校验失败后抛出的异常     *     * @param e     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>BindException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> BaseResponse <span class="token function">bindExceptionHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> BindException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String errorMessage <span class="token operator">=</span> <span class="token function">getValidErrorMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"接口:{}，发生参数校验异常，异常摘要:{}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理请求参数格式错误     *     * @param request     * @param e     * @return     * @RequestBody 上使用@Valid实体上使用@NotNull等，验证失败后抛出的异常是MethodArgumentNotValidException异常     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> BaseResponse <span class="token function">methodArgumentNotValidExceptionHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> MethodArgumentNotValidException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String errorMessage <span class="token operator">=</span> <span class="token function">getValidErrorMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"接口:{}，发生参数校验异常，异常摘要:{}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取@Valid、@Validated的异常信息     *     * @param e     * @return     */</span>    <span class="token keyword">private</span> String <span class="token function">getValidErrorMessage</span><span class="token punctuation">(</span>BindingResult e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>DefaultMessageSourceResolvable<span class="token operator">:</span><span class="token operator">:</span>getDefaultMessage<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 日常随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 日常随笔 </tag>
            
            <tag> 全局异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽取基本枚举接口</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/09/23/chou-qu-ji-ben-mei-ju-jie-kou/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/09/23/chou-qu-ji-ben-mei-ju-jie-kou/</url>
      
        <content type="html"><![CDATA[<h4 id="抽取公共的枚举类，方便一些场景下的使用"><a href="#抽取公共的枚举类，方便一些场景下的使用" class="headerlink" title="抽取公共的枚举类，方便一些场景下的使用"></a>抽取公共的枚举类，方便一些场景下的使用</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ObjectUtil<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EnumSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 基本枚举接口 * @date 2022-04-24 09:26 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取值     *     * @return     */</span>    T <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取值的描述     *     * @return     */</span>    String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据值获取枚举     *     * @param value     * @param clazz     * @param &lt;E>     * @return     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span> IBaseEnum<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> E <span class="token function">getEnumByValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>E<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EnumSet<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> ObjectUtil<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据文本标签获取值     *     * @param value     * @param clazz     * @param &lt;E>     * @return     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span> IBaseEnum<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> String <span class="token function">getDescriptionByValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>E<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        E matchEnum <span class="token operator">=</span> EnumSet<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> ObjectUtil<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>matchEnum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> matchEnum<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据值获取描述     *     * @param description     * @param clazz     * @param &lt;E>     * @return     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span> IBaseEnum<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> Object <span class="token function">getValueByDescription</span><span class="token punctuation">(</span>String description<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>E<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        E matchEnum <span class="token operator">=</span> EnumSet<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> ObjectUtil<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>matchEnum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> matchEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="实际使用如下"><a href="#实际使用如下" class="headerlink" title="实际使用如下"></a>实际使用如下</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 所有状态枚举 * @date 2022-04-22 10:25 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> StatusEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有状态     */</span>    <span class="token function">ENABLE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"启用"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DISABLED</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"禁用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Integer value<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 获取整个枚举</span>    StatusEnum statusEnum <span class="token operator">=</span> IBaseEnum<span class="token punctuation">.</span><span class="token function">getEnumByValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> StatusEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 结果：启用</span>    String description <span class="token operator">=</span> IBaseEnum<span class="token punctuation">.</span><span class="token function">getDescriptionByValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> StatusEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 结果：0</span>    Integer value <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> IBaseEnum<span class="token punctuation">.</span><span class="token function">getValueByDescription</span><span class="token punctuation">(</span><span class="token string">"启用"</span><span class="token punctuation">,</span> StatusEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 日常随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 日常随笔 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp实现虚拟机centos的内网穿透</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/09/21/frp-shi-xian-xu-ni-ji-centos-de-nei-wang-chuan-tou/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/09/21/frp-shi-xian-xu-ni-ji-centos-de-nei-wang-chuan-tou/</url>
      
        <content type="html"><![CDATA[<h3 id="需要一台有公网ip的服务器和随便一台虚拟机centos"><a href="#需要一台有公网ip的服务器和随便一台虚拟机centos" class="headerlink" title="需要一台有公网ip的服务器和随便一台虚拟机centos"></a>需要一台有公网ip的服务器和随便一台虚拟机centos</h3><h2 id="含公网ip的服务器配置如下："><a href="#含公网ip的服务器配置如下：" class="headerlink" title="含公网ip的服务器配置如下："></a>含公网ip的服务器配置如下：</h2><h3 id="1、下载frp"><a href="#1、下载frp" class="headerlink" title="1、下载frp"></a>1、下载frp</h3><pre class=" language-shell"><code class="language-shell">wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_arm64.tar.gz</code></pre><h3 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h3><pre class=" language-shell"><code class="language-shell">tar -zxvf frp_0.44.0_linux_amd64.tar.gz</code></pre><h3 id="3、移动到-x2F-usr-x2F-local下吧并重命名，个人习惯"><a href="#3、移动到-x2F-usr-x2F-local下吧并重命名，个人习惯" class="headerlink" title="3、移动到/usr/local下吧并重命名，个人习惯"></a>3、移动到/usr/local下吧并重命名，个人习惯</h3><pre class=" language-shell"><code class="language-shell">mv frp_0.44.0_linux_amd64 /usr/local/frp</code></pre><h3 id="4、cd到-x2F-usr-x2F-local-x2F-frp"><a href="#4、cd到-x2F-usr-x2F-local-x2F-frp" class="headerlink" title="4、cd到/usr/local/frp"></a>4、cd到/usr/local/frp</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/frp/</code></pre><h3 id="5、删除没有的配置文件（我们这里作为服务端，把客户端相关的配置文件删除了吧）"><a href="#5、删除没有的配置文件（我们这里作为服务端，把客户端相关的配置文件删除了吧）" class="headerlink" title="5、删除没有的配置文件（我们这里作为服务端，把客户端相关的配置文件删除了吧）"></a>5、删除没有的配置文件（我们这里作为服务端，把客户端相关的配置文件删除了吧）</h3><pre class=" language-shell"><code class="language-shell">rm -f frpc*</code></pre><h3 id="6、修改配置文件"><a href="#6、修改配置文件" class="headerlink" title="6、修改配置文件"></a>6、修改配置文件</h3><pre class=" language-shell"><code class="language-shell">vim frps.ini</code></pre><pre class=" language-shell"><code class="language-shell"># frps.ini[common]bind_port = 7000authentication_method = token# 认证密码，需要与客户端一致token = 12345678</code></pre><h3 id="7、配置成服务的方式启动吧"><a href="#7、配置成服务的方式启动吧" class="headerlink" title="7、配置成服务的方式启动吧"></a>7、配置成服务的方式启动吧</h3><pre class=" language-shell"><code class="language-shell">sudo vi /etc/systemd/system/frps.service</code></pre><pre class=" language-shell"><code class="language-shell">[Unit]Description=frps daemonAfter=syslog.target  network.targetWants=network.target [Service]Type=simpleExecStart=/usr/local/frp/frps -c /usr/local/frp/frps.ini [Install]WantedBy=multi-user.target</code></pre><h3 id="8、一些命令"><a href="#8、一些命令" class="headerlink" title="8、一些命令"></a>8、一些命令</h3><pre class=" language-shell"><code class="language-shell">systemctl enable frps</code></pre><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><pre class=" language-shell"><code class="language-shell">systemctl start frps</code></pre><h5 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h5><pre class=" language-shell"><code class="language-shell">systemctl stop frps</code></pre><h2 id="客户端虚拟机配置如下："><a href="#客户端虚拟机配置如下：" class="headerlink" title="客户端虚拟机配置如下："></a>客户端虚拟机配置如下：</h2><h3 id="1、下载frp-1"><a href="#1、下载frp-1" class="headerlink" title="1、下载frp"></a>1、下载frp</h3><pre class=" language-shell"><code class="language-shell">wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_arm64.tar.gz</code></pre><h3 id="2、解压-1"><a href="#2、解压-1" class="headerlink" title="2、解压"></a>2、解压</h3><pre class=" language-shell"><code class="language-shell">tar -zxvf frp_0.44.0_linux_amd64.tar.gz</code></pre><h3 id="3、移动到-x2F-use-x2F-local下吧并重命名，个人习惯"><a href="#3、移动到-x2F-use-x2F-local下吧并重命名，个人习惯" class="headerlink" title="3、移动到/use/local下吧并重命名，个人习惯"></a>3、移动到/use/local下吧并重命名，个人习惯</h3><pre class=" language-shell"><code class="language-shell">mv frp_0.44.0_linux_amd64 /usr/local/frp</code></pre><h3 id="4、cd到-x2F-usr-x2F-local-x2F-frp-1"><a href="#4、cd到-x2F-usr-x2F-local-x2F-frp-1" class="headerlink" title="4、cd到/usr/local/frp"></a>4、cd到/usr/local/frp</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/frp/</code></pre><h3 id="5、删除没有的配置文件（我们这里作为客户端，把服务端相关的配置文件删除了吧）"><a href="#5、删除没有的配置文件（我们这里作为客户端，把服务端相关的配置文件删除了吧）" class="headerlink" title="5、删除没有的配置文件（我们这里作为客户端，把服务端相关的配置文件删除了吧）"></a>5、删除没有的配置文件（我们这里作为客户端，把服务端相关的配置文件删除了吧）</h3><pre class=" language-shell"><code class="language-shell">rm -f frps*</code></pre><h3 id="6、修改配置文件-frpc-ini"><a href="#6、修改配置文件-frpc-ini" class="headerlink" title="6、修改配置文件 frpc.ini"></a>6、修改配置文件 frpc.ini</h3><pre class=" language-shell"><code class="language-shell">vim frpc.ini</code></pre><pre class=" language-shell"><code class="language-shell"># frpc.ini[common]# 对应外网服务器的ip和端口server_addr = 43.142.62.156server_port = 7000authentication_method = token# 认证密码，需要与服务端一致token = 12345678[ssh]type = tcplocal_ip = 127.0.0.1# 本机的服务端口local_port = 22# 让外网服务器开启的端口（需要防火墙放行）remote_port = 12900</code></pre><h3 id="7、设置为启动服务"><a href="#7、设置为启动服务" class="headerlink" title="7、设置为启动服务"></a>7、设置为启动服务</h3><pre class=" language-shell"><code class="language-shell">sudo vi /etc/systemd/system/frpc.service</code></pre><pre class=" language-shell"><code class="language-shell">[Unit]Description=frpc daemonAfter=syslog.target  network.targetWants=network.target [Service]Type=simpleExecStart=/usr/local/frp/frpc -c /usr/local/frp/frpc.ini [Install]WantedBy=multi-user.target</code></pre><h3 id="8、一些命令-1"><a href="#8、一些命令-1" class="headerlink" title="8、一些命令"></a>8、一些命令</h3><pre class=" language-shell"><code class="language-shell">systemctl enable frpc</code></pre><h5 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h5><pre class=" language-shell"><code class="language-shell">systemctl start frpc</code></pre><h5 id="关闭-1"><a href="#关闭-1" class="headerlink" title="关闭"></a>关闭</h5><pre class=" language-shell"><code class="language-shell">systemctl stop frpc</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
          <category> ssh </category>
          
          <category> frp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> ssh </tag>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh免密登录（三台虚拟机之间两两免密登录）</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/09/20/ssh-mian-mi-deng-lu-san-tai-xu-ni-ji-zhi-jian-liang-liang-mian-mi-deng-lu/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/09/20/ssh-mian-mi-deng-lu-san-tai-xu-ni-ji-zhi-jian-liang-liang-mian-mi-deng-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="现有三台centos的虚拟机，要求两两之间实现免密登录"><a href="#现有三台centos的虚拟机，要求两两之间实现免密登录" class="headerlink" title="现有三台centos的虚拟机，要求两两之间实现免密登录"></a>现有三台centos的虚拟机，要求两两之间实现免密登录</h1><p>192.168.118.128<br>192.168.118.129<br>192.168.118.130</p><h3 id="1、三台虚拟机都执行以下命令："><a href="#1、三台虚拟机都执行以下命令：" class="headerlink" title="1、三台虚拟机都执行以下命令："></a>1、三台虚拟机都执行以下命令：</h3><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa</code></pre><h3 id="2、三台虚拟机都进入-x2F-ssh-x2F-目录（该目录存放秘钥对）"><a href="#2、三台虚拟机都进入-x2F-ssh-x2F-目录（该目录存放秘钥对）" class="headerlink" title="2、三台虚拟机都进入/.ssh/目录（该目录存放秘钥对）"></a>2、三台虚拟机都进入/.ssh/目录（该目录存放秘钥对）</h3><pre class=" language-shell"><code class="language-shell">cd ~/.ssh/</code></pre><h3 id="3、三台虚拟机都执行以下命令："><a href="#3、三台虚拟机都执行以下命令：" class="headerlink" title="3、三台虚拟机都执行以下命令："></a>3、三台虚拟机都执行以下命令：</h3><pre class=" language-shell"><code class="language-shell">touch authorized_keys</code></pre><pre class=" language-shell"><code class="language-shell">chmod 600 authorized_keys</code></pre><pre class=" language-shell"><code class="language-shell">cat id_rsa.pub >> authorized_keys</code></pre><h4 id="此时，三个虚拟机的当前目录都为-ssh下"><a href="#此时，三个虚拟机的当前目录都为-ssh下" class="headerlink" title="此时，三个虚拟机的当前目录都为.ssh下"></a>此时，三个虚拟机的当前目录都为.ssh下</h4><h3 id="4、把129的公钥追加到128的authorized-keys"><a href="#4、把129的公钥追加到128的authorized-keys" class="headerlink" title="4、把129的公钥追加到128的authorized_keys"></a>4、把129的公钥追加到128的authorized_keys</h3><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.128:/home/</code></pre><h4 id="点击切换到128的连接，在128上执行如下命令"><a href="#点击切换到128的连接，在128上执行如下命令" class="headerlink" title="点击切换到128的连接，在128上执行如下命令"></a>点击切换到128的连接，在128上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="把128的公钥追加到129的authorized-keys"><a href="#把128的公钥追加到129的authorized-keys" class="headerlink" title="把128的公钥追加到129的authorized_keys"></a>把128的公钥追加到129的authorized_keys</h4><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.129:/home/</code></pre><h4 id="点击切换到129的连接，在129上执行如下命令"><a href="#点击切换到129的连接，在129上执行如下命令" class="headerlink" title="点击切换到129的连接，在129上执行如下命令"></a>点击切换到129的连接，在129上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="此时，128、129两两之间可实现ssh密码登录，接下来128与130之间以及129与130之间类似"><a href="#此时，128、129两两之间可实现ssh密码登录，接下来128与130之间以及129与130之间类似" class="headerlink" title="此时，128、129两两之间可实现ssh密码登录，接下来128与130之间以及129与130之间类似"></a>此时，128、129两两之间可实现ssh密码登录，接下来128与130之间以及129与130之间类似</h4><h3 id="5、把130的公钥追加到128的authorized-keys-130上"><a href="#5、把130的公钥追加到128的authorized-keys-130上" class="headerlink" title="5、把130的公钥追加到128的authorized_keys  (130上)"></a>5、把130的公钥追加到128的authorized_keys  (130上)</h3><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.128:/home/</code></pre><h4 id="点击切换到128的连接，在128上执行如下命令-1"><a href="#点击切换到128的连接，在128上执行如下命令-1" class="headerlink" title="点击切换到128的连接，在128上执行如下命令"></a>点击切换到128的连接，在128上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="把128的公钥追加到130的authorized-keys"><a href="#把128的公钥追加到130的authorized-keys" class="headerlink" title="把128的公钥追加到130的authorized_keys"></a>把128的公钥追加到130的authorized_keys</h4><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.130:/home/</code></pre><h4 id="点击切换到130的连接，在130上执行如下命令"><a href="#点击切换到130的连接，在130上执行如下命令" class="headerlink" title="点击切换到130的连接，在130上执行如下命令"></a>点击切换到130的连接，在130上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="此时实现了128与130之间的免密"><a href="#此时实现了128与130之间的免密" class="headerlink" title="此时实现了128与130之间的免密"></a>此时实现了128与130之间的免密</h4><h3 id="6、把130的公钥追加到129的authorized-keys-130上"><a href="#6、把130的公钥追加到129的authorized-keys-130上" class="headerlink" title="6、把130的公钥追加到129的authorized_keys (130上)"></a>6、把130的公钥追加到129的authorized_keys (130上)</h3><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.129:/home/</code></pre><h4 id="点击切换到129的连接，在129上执行如下命令-1"><a href="#点击切换到129的连接，在129上执行如下命令-1" class="headerlink" title="点击切换到129的连接，在129上执行如下命令"></a>点击切换到129的连接，在129上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="把129的公钥追加到130的authorized-keys"><a href="#把129的公钥追加到130的authorized-keys" class="headerlink" title="把129的公钥追加到130的authorized_keys"></a>把129的公钥追加到130的authorized_keys</h4><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.130:/home/</code></pre><h4 id="点击切换到130的连接，在130上执行如下命令-1"><a href="#点击切换到130的连接，在130上执行如下命令-1" class="headerlink" title="点击切换到130的连接，在130上执行如下命令"></a>点击切换到130的连接，在130上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="此时实现了129与130之间的免密"><a href="#此时实现了129与130之间的免密" class="headerlink" title="此时实现了129与130之间的免密"></a>此时实现了129与130之间的免密</h4><h3 id="6、两两之间校验"><a href="#6、两两之间校验" class="headerlink" title="6、两两之间校验"></a>6、两两之间校验</h3><pre class=" language-shell"><code class="language-shell">ssh root@192.168.118.128</code></pre><pre class=" language-shell"><code class="language-shell">ssh root@192.168.118.129</code></pre><pre class=" language-shell"><code class="language-shell">ssh root@192.168.118.130</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装jdk</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/08/04/centos-an-zhuang-jdk/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/08/04/centos-an-zhuang-jdk/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装maven</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/08/04/centos-an-zhuang-maven/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/08/04/centos-an-zhuang-maven/</url>
      
        <content type="html"><![CDATA[<h2 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h2><pre class=" language-shell"><code class="language-shell">cd /usr/local</code></pre><h2 id="下载maven"><a href="#下载maven" class="headerlink" title="下载maven"></a>下载maven</h2><pre class=" language-shell"><code class="language-shell">wget https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</code></pre><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class=" language-shell"><code class="language-shell">tar -xvf apache-maven-3.6.3-bin.tar.gz</code></pre><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><pre class=" language-shell"><code class="language-shell">mv apache-maven-3.6.3 maven</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><pre class=" language-shell"><code class="language-shell">vim /etc/profile</code></pre><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><pre class=" language-shell"><code class="language-shell">export PATH=/usr/local/maven/bin:$PATH</code></pre><h2 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h2><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre><h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><pre class=" language-shell"><code class="language-shell">mvn -V</code></pre><h2 id="进入maven"><a href="#进入maven" class="headerlink" title="进入maven"></a>进入maven</h2><pre class=" language-shell"><code class="language-shell">cd maven</code></pre><h2 id="创建repository目录"><a href="#创建repository目录" class="headerlink" title="创建repository目录"></a>创建repository目录</h2><pre class=" language-shell"><code class="language-shell">mkdir repository</code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><pre class=" language-shell"><code class="language-shell">cd conf/</code></pre><pre class=" language-shell"><code class="language-shell">vim settings.xml</code></pre><h2 id="配置依赖存储路径"><a href="#配置依赖存储路径" class="headerlink" title="配置依赖存储路径"></a>配置依赖存储路径</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>localRepository<span class="token operator">></span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>maven<span class="token operator">/</span>repository<span class="token operator">&lt;</span><span class="token operator">/</span>localRepository<span class="token operator">></span></code></pre><h2 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>mirror<span class="token operator">></span>    <span class="token operator">&lt;</span>id<span class="token operator">></span>nexus<span class="token operator">-</span>aliyun<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>    <span class="token operator">&lt;</span>mirrorOf<span class="token operator">></span>central<span class="token operator">&lt;</span><span class="token operator">/</span>mirrorOf<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>nexus<span class="token operator">-</span>aliyun<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>nexus<span class="token operator">/</span>content<span class="token operator">/</span>groups<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mirror<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose命令</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/08/04/docker-compose-ming-ling/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/08/04/docker-compose-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="停掉服务，删除容器，不删除镜像"><a href="#停掉服务，删除容器，不删除镜像" class="headerlink" title="停掉服务，删除容器，不删除镜像"></a>停掉服务，删除容器，不删除镜像</h2><pre class=" language-shell"><code class="language-shell">docker-compose down</code></pre><h2 id="重启-x2F-开始-x2F-停止服务"><a href="#重启-x2F-开始-x2F-停止服务" class="headerlink" title="重启/开始/停止服务"></a>重启/开始/停止服务</h2><pre class=" language-shell"><code class="language-shell">docker-compose restart/start/stop [服务名称]</code></pre><h2 id="运行某个服务"><a href="#运行某个服务" class="headerlink" title="运行某个服务"></a>运行某个服务</h2><pre class=" language-shell"><code class="language-shell">docker-compose run [服务名称]</code></pre><h2 id="查看服务中使用的镜像"><a href="#查看服务中使用的镜像" class="headerlink" title="查看服务中使用的镜像"></a>查看服务中使用的镜像</h2><pre class=" language-shell"><code class="language-shell">docker-compose images [服务名称]</code></pre><h2 id="重新构建（强制删除之前的镜像重新打）并启动"><a href="#重新构建（强制删除之前的镜像重新打）并启动" class="headerlink" title="重新构建（强制删除之前的镜像重新打）并启动"></a>重新构建（强制删除之前的镜像重新打）并启动</h2><pre class=" language-shell"><code class="language-shell">docker-compose up -d --build --force-recreate</code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker-compose </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo安装与搭建</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/07/01/hexo-an-zhuang-yu-da-jian/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/07/01/hexo-an-zhuang-yu-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><pre class=" language-shell"><code class="language-shell">npm install -g hexo-cli</code></pre><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><pre class=" language-shell"><code class="language-shell">hexo init blog</code></pre><pre class=" language-shell"><code class="language-shell">cd blog</code></pre><pre class=" language-shell"><code class="language-shell">npm install</code></pre><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><pre class=" language-shell"><code class="language-shell">hexo s</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker常用命令</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/07/01/docker-chang-yong-ming-ling/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/07/01/docker-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h2><pre class=" language-shell"><code class="language-shell">systemctl start docker</code></pre><h2 id="关闭docker服务"><a href="#关闭docker服务" class="headerlink" title="关闭docker服务"></a>关闭docker服务</h2><pre class=" language-shell"><code class="language-shell">systemctl stop docker</code></pre><h2 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h2><pre class=" language-shell"><code class="language-shell">systemctl restart docker</code></pre><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><pre class=" language-shell"><code class="language-shell">docker search java</code></pre><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre class=" language-shell"><code class="language-shell">docker pull java:8</code></pre><h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h2><pre class=" language-shell"><code class="language-shell">docker images</code></pre><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><ul><li>指定名称删除镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi java:8</code></pre><ul><li>指定名称删除镜像（强制）</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi -f java:8</code></pre><ul><li>删除所有没有引用的镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi `docker images | grep none | awk '{print $3}'`</code></pre><ul><li>强制删除所有镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi -f $(docker images)</code></pre><h2 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h2><ul><li>列出运行中的容器</li></ul><pre class=" language-shell"><code class="language-shell">docker ps</code></pre><ul><li>列出所有容器</li></ul><pre class=" language-shell"><code class="language-shell">docker ps -a</code></pre><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><pre class=" language-shell"><code class="language-shell">docker stop $ContainerName(or $ContainerId)</code></pre><h2 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h2><pre class=" language-shell"><code class="language-shell">docker kill $ContainerName</code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class=" language-shell"><code class="language-shell">docker start $ContainerName</code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><ul><li>先查询出容器的pid</li></ul><pre class=" language-shell"><code class="language-shell">docker inspect --format "{{.State.Pid}}" $ContainerName</code></pre><ul><li>根据容器的pid进入容器</li></ul><pre class=" language-shell"><code class="language-shell">nsenter --target "$pid" --mount --uts --ipc --net --pid</code></pre><h2 id="查看容器的IP地址"><a href="#查看容器的IP地址" class="headerlink" title="查看容器的IP地址"></a>查看容器的IP地址</h2><pre class=" language-shell"><code class="language-shell">docker inspect --format '{{ .NetworkSettings.IPAddress }}' $ContainerName</code></pre><h2 id="将容器启动方式改为always"><a href="#将容器启动方式改为always" class="headerlink" title="将容器启动方式改为always"></a>将容器启动方式改为always</h2><pre class=" language-shell"><code class="language-shell"># 将容器启动方式改为alwaysdocker container update --restart=always $ContainerName</code></pre><h2 id="同步宿主机时间到容器"><a href="#同步宿主机时间到容器" class="headerlink" title="同步宿主机时间到容器"></a>同步宿主机时间到容器</h2><pre class=" language-shell"><code class="language-shell">docker cp /etc/localtime $ContainerName:/etc/</code></pre><h2 id="指定容器时区"><a href="#指定容器时区" class="headerlink" title="指定容器时区"></a>指定容器时区</h2><pre class=" language-shell"><code class="language-shell">docker run -p 80:80 --name nginx \-e TZ="Asia/Shanghai" \-d nginx:1.17.0</code></pre><h2 id="查看容器资源占用状况"><a href="#查看容器资源占用状况" class="headerlink" title="查看容器资源占用状况"></a>查看容器资源占用状况</h2><ul><li>查看指定容器资源占用状况，比如cpu、内存、网络、io状态</li></ul><pre class=" language-shell"><code class="language-shell">docker stats $ContainerName</code></pre><ul><li>查看所有容器资源占用情况</li></ul><pre class=" language-shell"><code class="language-shell">docker stats -a</code></pre><h2 id="查看容器磁盘使用情况"><a href="#查看容器磁盘使用情况" class="headerlink" title="查看容器磁盘使用情况"></a>查看容器磁盘使用情况</h2><pre class=" language-shell"><code class="language-shell">docker system df</code></pre><h2 id="执行容器内部命令"><a href="#执行容器内部命令" class="headerlink" title="执行容器内部命令"></a>执行容器内部命令</h2><pre class=" language-shell"><code class="language-shell">docker exec -it $ContainerName /bin/bash</code></pre><h2 id="指定账号进入容器内部"><a href="#指定账号进入容器内部" class="headerlink" title="指定账号进入容器内部"></a>指定账号进入容器内部</h2><pre class=" language-shell"><code class="language-shell"># 使用root账号进入容器内部docker exec -it --user root $ContainerName /bin/bash</code></pre><h2 id="查看所有网络"><a href="#查看所有网络" class="headerlink" title="查看所有网络"></a>查看所有网络</h2><pre class=" language-shell"><code class="language-shell">docker network ls</code></pre><h2 id="创建外部网络"><a href="#创建外部网络" class="headerlink" title="创建外部网络"></a>创建外部网络</h2><pre class=" language-shell"><code class="language-shell">docker network create -d bridge my-bridge-network</code></pre><h2 id="指定容器网络"><a href="#指定容器网络" class="headerlink" title="指定容器网络"></a>指定容器网络</h2><pre class=" language-shell"><code class="language-shell">docker run -p 80:80 --name nginx \--network my-bridge-network \-d nginx:1.17.0</code></pre><h2 id="Docker容器清理"><a href="#Docker容器清理" class="headerlink" title="Docker容器清理"></a>Docker容器清理</h2><ul><li>查看Docker占用的磁盘空间情况</li></ul><pre class=" language-shell"><code class="language-shell">docker system df</code></pre><ul><li>删除所有关闭的容器</li></ul><pre class=" language-shell"><code class="language-shell">docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs docker rm</code></pre><ul><li>删除所有dangling镜像(没有Tag的镜像)</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi $(docker images | grep "^<none>" | awk "{print $3}")</code></pre><ul><li>删除所有dangling数据卷(即无用的 volume)</li></ul><pre class=" language-shell"><code class="language-shell">docker volume rm $(docker volume ls -qf dangling=true)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh配置</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/07/01/git-pei-zhi-ssh/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/07/01/git-pei-zhi-ssh/</url>
      
        <content type="html"><![CDATA[<h2 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h2><pre class=" language-shell"><code class="language-shell">git config --global user.name "yoonada"</code></pre><h2 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h2><pre class=" language-shell"><code class="language-shell">git config --global user.email "m15602498163@163.com"</code></pre><h2 id="生成-ssh-key"><a href="#生成-ssh-key" class="headerlink" title="生成 ssh key"></a>生成 ssh key</h2><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -b 4096 -C "m15602498163@163.com"</code></pre><h2 id="生成路径"><a href="#生成路径" class="headerlink" title="生成路径"></a>生成路径</h2><pre class=" language-text"><code class="language-text">window的生成路径：C:\Users\用户\.sshLinux的生成路径：/etc/ssh</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装RabbitMQ</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/07/01/docker-an-zhuang-rabbitmq/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/07/01/docker-an-zhuang-rabbitmq/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">docker run --name rabbitmq -p 5672:5672 -p 15672:15672 -d --restart=always rabbitmq:management</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装redis</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/07/01/docker-an-zhuang-redis/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/07/01/docker-an-zhuang-redis/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">docker run --name redis -p 6380:6379 -d --restart=always redis:latest redis-server --appendonly yes --requirepass "DD123456aa"</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装nacos</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/07/01/docker-an-zhuang-nacos/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/07/01/docker-an-zhuang-nacos/</url>
      
        <content type="html"><![CDATA[<h2 id="拉取docker镜像"><a href="#拉取docker镜像" class="headerlink" title="拉取docker镜像"></a>拉取docker镜像</h2><pre class=" language-shell"><code class="language-shell">docker pull nacos/nacos-server:1.4.2</code></pre><h2 id="创建临时容器（用来拷贝配置、日志使用）"><a href="#创建临时容器（用来拷贝配置、日志使用）" class="headerlink" title="创建临时容器（用来拷贝配置、日志使用）"></a>创建临时容器（用来拷贝配置、日志使用）</h2><pre class=" language-shell"><code class="language-shell">docker run -p 8848:8848 --name nacostest -d nacos/nacos-server:1.4.2</code></pre><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><pre class=" language-shell"><code class="language-shell">mkdir -p /mydata/nacos/conf</code></pre><pre class=" language-shell"><code class="language-shell">mkdir -p /mydata/nacos/logs</code></pre><h2 id="配置文件复制"><a href="#配置文件复制" class="headerlink" title="配置文件复制"></a>配置文件复制</h2><pre class=" language-shell"><code class="language-shell">docker cp nacostest:/home/nacos/logs/ /mydata/nacos/</code></pre><pre class=" language-shell"><code class="language-shell">docker cp nacostest:/home/nacos/conf/ /mydata/nacos/</code></pre><h2 id="删除临时容器"><a href="#删除临时容器" class="headerlink" title="删除临时容器"></a>删除临时容器</h2><pre class=" language-shell"><code class="language-shell">docker stop nacostest</code></pre><pre class=" language-shell"><code class="language-shell">docker rm nacostest</code></pre><h2 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h2><pre class=" language-shell"><code class="language-shell">docker run -d \-e MODE=standalone \-e SPRING_DATASOURCE_PLATFORM=mysql \-e MYSQL_SERVICE_HOST=43.142.62.156 \-e MYSQL_SERVICE_PORT=3307 \-e MYSQL_SERVICE_USER=root \-e MYSQL_SERVICE_PASSWORD=DD123456aa \-e MYSQL_SERVICE_DB_NAME=nacos_config \-e TIME_ZONE='Asia/Shanghai' \-v /mydata/nacos/logs:/home/nacos/logs \-v /mydata/nacos/conf:/home/nacos/conf \-p 8848:8848 \--name nacos \--restart=always \nacos/nacos-server:1.4.2</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装MySQL</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/07/01/docker-an-zhuang-mysql/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/07/01/docker-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="拉取5-7的镜像"><a href="#拉取5-7的镜像" class="headerlink" title="拉取5.7的镜像"></a>拉取5.7的镜像</h2><pre class=" language-shell"><code class="language-shell">docker pull mysql:5.7</code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class=" language-shell"><code class="language-shell">docker run --name mysql -p 3307:3306 --restart=always -e MYSQL_ROOT_PASSWORD=DD123456aa -d mysql:5.7</code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><pre class=" language-shell"><code class="language-shell">docker exec -it mysql bash</code></pre><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><pre class=" language-shell"><code class="language-shell">mysql -u root -p</code></pre><h2 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h2><pre class=" language-shell"><code class="language-shell">ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'DD123456aa';</code></pre><h2 id="刷新"><a href="#刷新" class="headerlink" title="刷新"></a>刷新</h2><pre class=" language-shell"><code class="language-shell">flush privileges;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos常用命令</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/07/01/centos-chang-yong-ming-ling/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/07/01/centos-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h2><pre class=" language-shell"><code class="language-shell">systemctl start firewalld</code></pre><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><pre class=" language-shell"><code class="language-shell">systemctl stop firewalld</code></pre><h2 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h2><pre class=" language-shell"><code class="language-shell">systemctl status firewalld </code></pre><h2 id="开放某个端口"><a href="#开放某个端口" class="headerlink" title="开放某个端口"></a>开放某个端口</h2><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --add-port=80/tcp --permanent</code></pre><h2 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h2><pre class=" language-shell"><code class="language-shell">firewall-cmd --reload</code></pre><h2 id="查看已经开放的端口"><a href="#查看已经开放的端口" class="headerlink" title="查看已经开放的端口"></a>查看已经开放的端口</h2><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --list-ports</code></pre><h2 id="查找（在-中填写你要的查找的路径）"><a href="#查找（在-中填写你要的查找的路径）" class="headerlink" title="查找（在**中填写你要的查找的路径）"></a>查找（在**中填写你要的查找的路径）</h2><pre class=" language-shell"><code class="language-shell">find / -name **</code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装nginx</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/07/01/centos-an-zhuang-nginx/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/07/01/centos-an-zhuang-nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre class=" language-shell"><code class="language-shell">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</code></pre><h2 id="下载稳定版本"><a href="#下载稳定版本" class="headerlink" title="下载稳定版本"></a>下载稳定版本</h2><pre class=" language-shell"><code class="language-shell">wget http://nginx.org/download/nginx-1.16.1.tar.gz</code></pre><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class=" language-shell"><code class="language-shell">tar -zxvf nginx-1.16.1.tar.gz</code></pre><h2 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h2><pre class=" language-shell"><code class="language-shell">cd nginx-1.16.1</code></pre><h2 id="配置编译"><a href="#配置编译" class="headerlink" title="配置编译"></a>配置编译</h2><pre class=" language-shell"><code class="language-shell">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-shell"><code class="language-shell">make && make install</code></pre><h2 id="被安装的目录"><a href="#被安装的目录" class="headerlink" title="被安装的目录"></a>被安装的目录</h2><pre class=" language-shell"><code class="language-shell">/usr/local/nginx/</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装docker-compose</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/07/01/centos-an-zhuang-docker-compose/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/07/01/centos-an-zhuang-docker-compose/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose</code></pre><pre class=" language-shell"><code class="language-shell">chmod +x /usr/local/bin/docker-compose</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装docker</title>
      <link href="/liu-cj25/liu-cj25.github.io/2022/07/01/centos-an-zhuang-docker/"/>
      <url>/liu-cj25/liu-cj25.github.io/2022/07/01/centos-an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><pre class=" language-shell"><code class="language-shell">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><h2 id="安装配置相关依赖"><a href="#安装配置相关依赖" class="headerlink" title="安装配置相关依赖"></a>安装配置相关依赖</h2><pre class=" language-shell"><code class="language-shell">sudo yum install -y yum-utils</code></pre><pre class=" language-shell"><code class="language-shell">sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo</code></pre><h2 id="安装docker引擎"><a href="#安装docker引擎" class="headerlink" title="安装docker引擎"></a>安装docker引擎</h2><pre class=" language-shell"><code class="language-shell">sudo yum install docker-ce docker-ce-cli containerd.io</code></pre><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><pre class=" language-shell"><code class="language-shell">sudo systemctl start docker</code></pre><h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><pre class=" language-shell"><code class="language-shell">sudo systemctl enable docker</code></pre><h2 id="验证是否正确安装"><a href="#验证是否正确安装" class="headerlink" title="验证是否正确安装"></a>验证是否正确安装</h2><pre class=" language-shell"><code class="language-shell">sudo docker run hello-world</code></pre><h2 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h2><pre class=" language-shell"><code class="language-shell">sudo mkdir -p /etc/docker</code></pre><pre class=" language-shell"><code class="language-shell">sudo tee /etc/docker/daemon.json <<-'EOF'{  "registry-mirrors": ["https://9w9zqgnf.mirror.aliyuncs.com"]}EOF</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl daemon-reload</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl restart docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
